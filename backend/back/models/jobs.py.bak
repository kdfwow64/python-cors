from db import db
class jobConfigurationParserModel(db.Model):
  """
  Representation of job configuration parser model in database

  """
  __tablename__ = 'JobConfigurationParser'

  id = db.Column(db.Integer, primary_key=True)
  name = db.Column(db.String(50))
  use_device_credentials = db.Column(db.Boolean)
  login = db.Column(db.String(80))
  password = db.Column(db.String(15))
  use_enable_password = db.Column(db.Boolean)
  enable_password = db.Column(db.String(50))
  strict_matching = db.Column(db.Boolean)
  parameters = db.Column(db.JSON)
  schedule = db.Column(db.DateTime)
  def __init__(self, **data):
    self.name = data.get('name')
    self.use_device_credentials = data.get('use_device_credentials')
    self.login = data.get('login')
    self.password = data.get('password')
    self.use_enable_password = data.get('use_enable_password, False')
    self.enable_password = data.get('enable_password')
    self._host_list = data.get('host_list')
    self._key_list = data.get('key_list')
    self.parameters = data.get('parameters', {})
    self.schedule = data.get('schedule') 
  def json(self):
    """
    return a json representation of data presented in the database

    """
    return {'name': self.name,
        'use_device_credentials': self.use_device_credentials,
        'login':self.login,
        'password':self.password,
        'use_enable_password' :self.use_enable_password,
        'enable_password' :self.enable_password,
        '_host_list' :self._host_list,
        '_key_list' :self._key_list,
        'parameters' :self.parameters,
        'schedule' :self.schedule,
        }

  @classmethod
  def find_by_name(cls, name):
    return cls.query.filter_by(name=name).first()

  def save_to_db(self):
    db.session.add(self)
    db.session.commit()

  def delete_from_db(self):
    db.session.delete(self)
    db.session.commit()
class jobDifferPrechekModel(db.Model):
  """
  Representation of job Differ Prechek Model

  """
  __tablename__ = 'JobDifferPrechek'

  id = db.Column(db.Integer, primary_key=True)
  name = db.Column(db.String(50))
  use_device_credentials = db.Column(db.Boolean)
  login = db.Column(db.String(80))
  password = db.Column(db.String(15))
  use_enable_password = db.Column(db.Boolean)
  enable_password = db.Column(db.String(50))
  parameters = db.Column(db.JSON)
  schedule = db.Column(db.DateTime)
  def __init__(self, **data):
    self.name = data.get('name')
    self.use_device_credentials = data.get('use_device_credentials')
    self.login = data.get('login')
    self.password = data.get('password')
    self.use_enable_password = data.get('use_enable_password, False')
    self.enable_password = data.get('enable_password')
    self._host_list = data.get('host_list')
    self.command_list = data.get('command_list')
    self.parameters = data.get('parameters', {})
    self.schedule = data.get('schedule')
  def json(self):
    """
    return a json representation of data presented in the database

    """
    return {'name': self.name,
        'use_device_credentials': self.use_device_credentials,
        'login':self.login,
        'password':self.password,
        'use_enable_password' :self.use_enable_password,
        'enable_password' :self.enable_password,
        '_host_list' :self._host_list,
        '_command_list' :self._command_list,
        'parameters' :self.parameters,
        'schedule' :self.schedule}
  @classmethod
  def find_by_name(cls, name):
    return cls.query.filter_by(name=name).first()

  def save_to_db(self):
    db.session.add(self)
    db.session.commit()

  def delete_from_db(self):
    db.session.delete(self)
    db.session.commit()

class jobDifferPostcheckModel(db.Model):
  """
  representation of job Differ Postcheck Model

  """
  __tablename__ = 'JobDifferPostcheck'

  id = db.Column(db.Integer, primary_key=True)
  name = db.Column(db.String(50))
  use_device_credentials = db.Column(db.Boolean)
  login = db.Column(db.String(80))
  password = db.Column(db.String(15))
  use_enable_password = db.Column(db.Boolean)
  enable_password = db.Column(db.String(50))
  parameters = db.Column(db.JSON)
  schedule = db.Column(db.DateTime)
  def __init__(self, **data):
    self.name = data.get('name')
    self.use_device_credentials = data.get('use_device_credentials')
    self.login = data.get('login')
    self.password = data.get('password')
    self.use_enable_password = data.get('use_enable_password, False')
    self.enable_password = data.get('enable_password')
    self._prechekconfiguration_list = data.get('precheckconfiguration_list')
    self.parameters = data.get('parameters', {})
    self.schedule = data.get('schedule')
  def json(self):
    """
    return a json representation of data presented in the database

    """
    return {'name': self.name,
        'use_device_credentials': self.use_device_credentials,
        'login':self.login,
        'password':self.password,
        'use_enable_password' :self.use_enable_password,
        'enable_password' :self.enable_password,
        '_prechekconfiguration_list' :self._prechekconfiguration_list,
        'parameters' :self.parameters,
        'schedule' :self.schedule}
  @classmethod
  def find_by_name(cls, name):
    return cls.query.filter_by(name=name).first()

  def save_to_db(self):
    db.session.add(self)
    db.session.commit()

  def delete_from_db(self):
    db.session.delete(self)
    db.session.commit()

class jobImageLoaderModel(db.Model):
  """
  representation of job Image Loader Model

  """
  __tablename__ = 'JobImageLoader'

  id = db.Column(db.Integer, primary_key=True)
  name = db.Column(db.String(50))
  use_device_credentials = db.Column(db.Boolean)
  login = db.Column(db.String(80))
  password = db.Column(db.String(15))
  use_enable_password = db.Column(db.Boolean)
  enable_password = db.Column(db.String(50))
  parameters = db.Column(db.JSON)
  schedule = db.Column(db.DateTime)
  def __init__(self, **data):
    self.name = data.get('name')
    self.use_device_credentials = data.get('use_device_credentials')
    self.login = data.get('login')
    self.password = data.get('password')
    self.use_enable_password = data.get('use_enable_password, False')
    self.enable_password = data.get('enable_password')
    self._host_list = data.get('host_list')
    self.storage_deice = data.get('storage_deice')
    self.ftp_server_name = data.get('ftp_server_name')
    self.ftp_user = data.get('ftp_user')
    self.ftp_password = data.get('ftp_password')
    self.image_file_path = data.get('image_file_path')
    self.parameters = data.get('parameters', {})
    self.schedule = data.get('schedule')
  def json(self):
    """
    return a json representation of data presented in the database

    """
    return {'name': self.name,
        'use_device_credentials': self.use_device_credentials,
        'login':self.login,
        'password':self.password,
        'use_enable_password' :self.use_enable_password,
        'enable_password' :self.enable_password,
        '_host_list': self._host_list,
        'storage_device': self.storage_device,
        'ftp_server_name' :self.ftp_server_name,
        'ftp_user': self.ftp_user,
        'ftp_password': self.ftp_password,
        'image_file_path': self.image_file_path,
        'parameters' :self.parameters,
        'schedule' :self.schedule,
        }
  @classmethod
  def find_by_name(cls, name):
    return cls.query.filter_by(name=name).first()

  def save_to_db(self):
    db.session.add(self)
    db.session.commit()

  def delete_from_db(self):
    db.session.delete(self)
    db.session.commit()

class jobConfigurationSenderModel(db.Model):
  """
  representation of job Configuration Sender Model

  """
  __tablename__ = 'JobConfigurationSender'

  id = db.Column(db.Integer, primary_key=True)
  name = db.Column(db.String(50))
  use_device_credentials = db.Column(db.Boolean)
  login = db.Column(db.String(80))
  password = db.Column(db.String(15))
  use_enable_password = db.Column(db.Boolean)
  enable_password = db.Column(db.String(50))
  permission_host_configuration = db.Column(db.Boolean)
  parameters = db.Column(db.JSON)
  schedule = db.Column(db.DateTime)
  def __init__(self, **data):
    self.name = data.get('name')
    self.use_device_credentials = data.get('use_device_credentials')
    self.login = data.get('login')
    self.password = data.get('password')
    self.use_enable_password = data.get('use_enable_password, False')
    self.enable_password = data.get('enable_password')
    self.permission_host_configuration = data.get('permission_host_configuration')
    self._host_list = data.get('host_list')
    self._command_list = data.get('command_list')
    self._configurationspreadsheet_list = data.get('configurationspreadsheet_list')
    self.parameters = data.get('parameters', {})
    self.schedule = data.get('schedule')
  def json(self):
    """
    return a json representation of data presented in the database

    """
    return {'name': self.name,
        'use_device_credentials': self.use_device_credentials,
        'login':self.login,
        'password':self.password,
        'use_enable_password' :self.use_enable_password,
        'enable_password' :self.enable_password,
        'permission_host_configuration' :self.permission_host_configuration,
        '_configurationspreadsheet_list' :self._configurationspreadsheet_list,
        '_host_list' :self._host_list,
        '_command_list' :self._command_list,
        'parameters' :self.parameters,
        'schedule' :self.schedule,
        }
  @classmethod
  def find_by_name(cls, name):
    return cls.query.filter_by(name=name).first()

  def save_to_db(self):
    db.session.add(self)
    db.session.commit()

  def delete_from_db(self):
    db.session.delete(self)
    db.session.commit()
